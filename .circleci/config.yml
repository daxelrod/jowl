version: 2.1

orbs:
  node: circleci/node@5.0.0

workflows:
  build-deploy:
    jobs:
      - build:
          matrix:
            parameters:
              os:
                - linux
                - macos
                - windows
              node-version:
                - "6" # Best effort support
                - "8" # Best effort support
                - "10" # Best effort support
                - "12" # Best effort support
                - "14" # Best effort support
                - "16" # Fully supported
                - "18" # Fully supported
                - "20" # Fully supported
          filters:
            # Runs on all branches by default
            # Runs on no tags by default, so must add version tags to allow deploy jobs to run
            tags:
              only: /^v.*/
      - deploy-npm:
          requires:
            - build
          filters:
            # Only version tags
            tags:
              only: /^v.*/
            # Necessary to prevent building on every branch even though tags are restricted
            branches:
              ignore: /.*/
      - deploy-homebrew:
          requires:
            # Homebrew automation depends on pulling the published package from npmjs.org
            - deploy-npm
          filters:
            # Only version tags
            tags:
              only: /^v.*/
            # Necessary to prevent building on every branch even though tags are restricted
            branches:
              ignore: /.*/

executors:
  linux:
    docker:
      # Use a base image rather than a node image because the node image requires us to already know
      # the Node version when defining the executor, but our marix build takes the executor and
      # node version as an argument, so we can't parameterize this at executor definition time.
      - image: cimg/base:2022.01 # Version chosen arbitrarily as newest at time of writing
  macos:
    macos:
      xcode: 13.2.1 # Version chosen arbitrarily as newest at time of writing
  # Circle's docs recommend using the executor definition from the windows orb. However, it does
  # not appear to be possible to use that in an executors section that is compatible with matrix builds,
  # so we instead expand it manually. The anchor allows us to reference it in conditionals below.
  windows: &windows-executor
    machine:
      image: windows-server-2019-vs2019:stable # Version chosen arbitrarily as newest at time of writing
      resource_class: windows.medium # Need to specify this explicitly or it defaults to a non-windows size
      shell: powershell.exe

jobs:
  build:
    parameters:
      os:
        type: executor
      node-version:
        type: string
    executor: << parameters.os >>
    steps:
      - checkout
      # The node orb is not compatible with Windows executors, but they already have nvm installed.
      # Unfortunately, https://github.com/coreybutler/nvm-windows/issues/708 means that we would
      # need to specify an exact dot version of Node to use, and https://github.com/coreybutler/nvm-windows/issues/738
      # means that nvm will silently fail. Instead, use nvs, which has addressed both of these problems.
      - when:
          condition:
            equal: [ *windows-executor, << parameters.os >> ]
          steps:
            - run: choco install nvs
            - run: nvs add node/<< parameters.node-version >>
            - run: nvs use node/<< parameters.node-version >>
            - run: npm install --global yarn
      # All other executors can use the orb to install Node
      - unless:
          condition:
            equal: [ *windows-executor, << parameters.os >> ]
          steps:
            - node/install:
                node-version: << parameters.node-version >>
                install-yarn: true
      - restore_cache:
          keys:
            # parameters.os is an Executor object, not a string. Nevertheless, its string representation does seem to be stable
            # between runs. If that ever changes, the worst case would just be a cache miss.
            - v4-dependencies-<<parameters.os>>-<<parameters.node-version>>-{{ checksum "package.json" }}{{ checksum "yarn.lock" }}
            # fallback to using the latest cache if no exact match is found
            - v4-dependencies-<<parameters.os>>-<<parameters.node-version>>
      - run: yarn install --frozen-lockfile
      - save_cache:
          paths:
            - node_modules
          key: v4-dependencies-<<parameters.os>>-<<parameters.node-version>>-{{ checksum "package.json" }}{{ checksum "yarn.lock" }}
      - save_cache:
          paths:
            - node_modules
          key: v4-dependencies-<<parameters.os>>-<<parameters.node-version>>
      - run: yarn run build
  deploy-npm:
    executor: linux
    steps:
      - checkout
      - node/install:
          node-version: "16"
      - run: npm config set "//registry.npmjs.org/:_authToken=$NPM_TOKEN"
      - run: npm publish
  deploy-homebrew:
    docker:
      - image: homebrew/brew:3.3.15 # Version chosen arbitrarily as newest at time of writing
    steps:
      - add_ssh_keys:
          fingerprints:
            - "56:e9:ae:84:c0:ae:f2:55:2a:9a:f9:73:8a:0d:06:f4" # "CircleCI Push" Deploy Key in Github
      - run: |
          export JOWL_VERSION="$(echo ${CIRCLE_TAG} | sed 's/^v//')"
          git config --global user.email "git@danonline.net"
          git config --global user.name "Daniel Axelrod (via CircleCI)"
          export HOMEBREW_NO_ANALYTICS=1 HOMEBREW_NO_AUTO_UPDATE=1
          brew tap daxelrod/jowl
          brew bump-formula-pr daxelrod/jowl/jowl --version="${JOWL_VERSION}" --write-only --commit
          brew audit daxelrod/jowl/jowl --strict
          cd "$(dirname $(brew formula daxelrod/jowl/jowl))"
          # bump-formula-pr --message only affects the PR message, not the commit message
          git commit --amend -m "chore(release): jowl ${JOWL_VERSION}" -m "" -m "Created automatically by deploy-homebrew CircleCI job in main jowl repo"
          git --no-pager show
          git push
